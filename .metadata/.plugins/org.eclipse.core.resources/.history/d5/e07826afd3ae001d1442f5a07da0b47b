package playtestApp;

import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.*;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;

public class PlaytestScreen extends JFrame {

	private JPanel contentPane;
	
	private LevelSelection parent = null;
	private DataManager.EntryInfo levelInfo = null; 

	private Timer timer;
	private Boolean isTimerCounting = false;
	private long startTime = 0;
	private long elapsedTime = 0;
	private JLabel lblTimer;
	private JSlider sliderDifficulty;
	private JLabel lblDifficultyValue;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					PlaytestScreen frame = new PlaytestScreen();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	public PlaytestScreen(LevelSelection parent) // first
	{
		this(); 
		this.parent = parent; 
	}
	
	/**
	 * Create the frame.
	 */
	public PlaytestScreen() 
	{
		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 800, 500);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		// levelInfo = DataManager.GetCurrLevel(); 
		levelInfo = new DataManager.EntryInfo(0, "Test level 1");
		
		JLabel lblTitle = new JLabel(DataManager.gameInfo.name + " - " + levelInfo.name); 
		lblTitle.setHorizontalAlignment(SwingConstants.CENTER);
		lblTitle.setBounds(293, 44, 228, 16);
		contentPane.add(lblTitle);
		
		JButton btnLevels = new JButton("<-");
		btnLevels.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				OpenLevelsScreen(); 
			}
		});
		btnLevels.setBounds(33, 28, 55, 29);
		contentPane.add(btnLevels);
		
		JButton btnPrevLevel = new JButton("<");
		btnPrevLevel.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				DataManager.NextLevel(); 
				PlaytestScreen newPlaytestScreen = new PlaytestScreen(parent); 
				newPlaytestScreen.setVisible(true);
				setVisible(false);
			}
		});
		btnPrevLevel.setBounds(188, 39, 35, 29);
		contentPane.add(btnPrevLevel);
		
		JButton btnNextLevel = new JButton(">");
		btnNextLevel.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				DataManager.PrevLevel();
				PlaytestScreen newPlaytestScreen = new PlaytestScreen(parent); 
				newPlaytestScreen.setVisible(true);
				setVisible(false);
			}
		});
		btnNextLevel.setBounds(568, 39, 35, 29);
		contentPane.add(btnNextLevel);
		
		lblTimer = new JLabel("00:00:00");
		lblTimer.setFont(new Font("Lucida Grande", Font.PLAIN, 22));
		lblTimer.setHorizontalAlignment(SwingConstants.CENTER);
		lblTimer.setBounds(207, 122, 161, 43);
		contentPane.add(lblTimer);
		
		JButton btnTimerPlayPause = new JButton("PLAY");
		btnTimerPlayPause.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				StartStopwatch();
			}
		});
		btnTimerPlayPause.setBounds(369, 134, 88, 29);
		contentPane.add(btnTimerPlayPause);
		
		JButton btnTimerEdit = new JButton("EDIT");
		btnTimerEdit.setBounds(469, 134, 88, 29);
		contentPane.add(btnTimerEdit);
		
		sliderDifficulty = new JSlider();
		sliderDifficulty.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) { UpdateDifficulty(); }
		});
		sliderDifficulty.setMinorTickSpacing(1);
		sliderDifficulty.setMajorTickSpacing(5);
		sliderDifficulty.setSnapToTicks(true);
		sliderDifficulty.setPaintLabels(true);
		sliderDifficulty.setPaintTicks(true);
		sliderDifficulty.setMaximum(10);
		sliderDifficulty.setBounds(331, 198, 190, 43);
		contentPane.add(sliderDifficulty);
		
		JLabel lblDifficulty = new JLabel("Difficulty Rating");
		lblDifficulty.setBounds(176, 212, 133, 16);
		contentPane.add(lblDifficulty);
		
		lblDifficultyValue = new JLabel("10");
		lblDifficultyValue.setBounds(575, 212, 61, 16);
		contentPane.add(lblDifficultyValue);
		
		JTextArea txtSuggestions = new JTextArea();
		txtSuggestions.setBounds(188, 296, 184, 126);
		contentPane.add(txtSuggestions);
		
		JTextArea txtBugs = new JTextArea();
		txtBugs.setBounds(430, 296, 184, 126);
		contentPane.add(txtBugs);
		
		JLabel lblSuggestions = new JLabel("Suggestions");
		lblSuggestions.setBounds(188, 268, 140, 16);
		contentPane.add(lblSuggestions);
		
		JLabel lblBugs = new JLabel("Bugs");
		lblBugs.setBounds(430, 268, 61, 16);
		contentPane.add(lblBugs);
		
		JButton btnReset = new JButton("RESET");
		btnReset.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				ResetStopwatch();
			}
		});
		btnReset.setBounds(561, 134, 88, 29);
		contentPane.add(btnReset);

		timer = new Timer(10, new TimerListener());
	}
	
	private void OpenLevelsScreen() 
	{
//		DataManager.levelInfo.Reset(); 
		parent.setVisible(true);
		this.setVisible(false);
	}

	// Update a stopwatch that is counting up every millisecond, using the Java javax.swing.Timer library
	private void StartStopwatch()
	{
		if (!isTimerCounting) {
			startTime = System.currentTimeMillis() - elapsedTime;
			timer = new Timer(10, new TimerListener());
			timer.start();
			isTimerCounting = true;
		}
		else
		{
			timer.stop();
			elapsedTime = System.currentTimeMillis() - startTime;
			isTimerCounting = false;
		}
	}

	private void ResetStopwatch()
	{
		timer.stop();
		isTimerCounting = false;
		lblTimer.setText("00:00:00");
	}

	private class TimerListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            elapsedTime = System.currentTimeMillis() - startTime;
            int minutes = (int) (elapsedTime / 60000);
            int seconds = (int) ((elapsedTime % 60000) / 1000);
            int milliseconds = (int) (elapsedTime % 1000);
            String time = String.format("%02d:%02d:%02d", minutes, seconds, milliseconds / 10);
            lblTimer.setText(time);
        }
    }

	private void UpdateDifficulty() 
	{
		int value = sliderDifficulty.getValue();
		lblDifficultyValue.setText(String.valueOf(value));
	}
}
