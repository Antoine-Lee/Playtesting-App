package playtestApp;

import java.awt.EventQueue;
import java.awt.Point;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.JTable;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JScrollPane;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class LevelSelection extends JFrame {

	private JPanel contentPane;
	private JTable tblLevels;
	
	private Vector<Vector<Object>> data = new Vector<Vector<Object>>(); 
	private JLabel lblTitle;
	
	private GameSelection parent = null; 
	private JButton btnSettings;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					LevelSelection frame = new LevelSelection();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	public LevelSelection (GameSelection parent)
	{
		this(); 
		this.parent = parent; 
	}

	/**
	 * Create the frame.
	 */
	public LevelSelection() 
	{
		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 800, 500);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		lblTitle = new JLabel(DataManager.gameInfo.name + " - Levels");
		lblTitle.setBounds(383, 10, 147, 16);
		lblTitle.setHorizontalAlignment(SwingConstants.CENTER);
		contentPane.add(lblTitle);
		
		JLabel lblUser = new JLabel("Username");
		lblUser.setHorizontalAlignment(SwingConstants.RIGHT);
		lblUser.setBounds(542, 10, 137, 16);
		contentPane.add(lblUser);
		
		String username = DataManager.GetUsername(); 
		Boolean isAdmin = DataManager.GetAdminStatus(); 
		
		lblUser.setText(username + (isAdmin ? " (Admin)" : ""));
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(90, 54, 654, 373);
		contentPane.add(scrollPane);
		
		DefaultTableModel tblModel = new DefaultTableModel () {
			@Override
		    public boolean isCellEditable(int row, int column) { return false; } // make uneditable
		}; 

		tblLevels = new JTable(tblModel);
		tblLevels.addMouseListener(new MouseAdapter() {
		    public void mousePressed(MouseEvent mouseEvent) {
		        JTable table =(JTable) mouseEvent.getSource();
		        Point point = mouseEvent.getPoint();
		        int row = table.rowAtPoint(point);
		        if (mouseEvent.getClickCount() == 2 && table.getSelectedRow() != -1) 
		        {
		        	SelectLevel(row);
		        }
		    }
		});
		
		scrollPane.setViewportView(tblLevels);
		
		JButton btnGames = new JButton("<-");
		btnGames.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				OpenGamesScreen(); 
			}
		});
		btnGames.setBounds(124, 10, 55, 29);
		contentPane.add(btnGames);
		
		btnSettings = new JButton("Settings");
		btnSettings.setBounds(627, 13, 117, 29);
		contentPane.add(btnSettings);
		
		ShowLevels(); 
	}
	
	private void ShowLevels() 
	{
		Connection conn; 
		
		try {
			// connect to the db
			conn = DatabaseManager.getConnection(); 
			
			// create statement using sql
			String sql = "SELECT  * FROM Levels WHERE GameID = " + DataManager.gameInfo.id + " ORDER BY LevelIndex";
			PreparedStatement statement = conn.prepareStatement(sql);
			
			// execute sql query and store result set
			ResultSet rs = statement.executeQuery();
			
			DefaultTableModel tblModel = (DefaultTableModel) tblLevels.getModel(); 
			
			Vector<String> columnTitles = new Vector<String> ();
			columnTitles.add("Name"); 
			columnTitles.add("Difficulty Rating"); 
			columnTitles.add("Time Taken"); 
		    
			Vector<Vector<Object>> tableData = new Vector<Vector<Object>>();
			Vector<Integer> indicies = new Vector<Integer>(); 
			
			while (rs.next())
			{
				Vector<Object> vector = new Vector<Object>();
				vector.add(rs.getObject("LevelName"));

				// Query the Reviews table in the SQL database to get the Difficulty and TimeTaken for this level
				// If the review does not exist, return a "-" instead
				sql = "SELECT * FROM Reviews WHERE LevelID = " + rs.getObject("LevelID") + " AND UserID = " + DataManager.GetUserId();
				PreparedStatement statement2 = conn.prepareStatement(sql);
				ResultSet rs2 = statement2.executeQuery();

				if (rs2.next())
				{
					vector.add(rs2.getObject("Difficulty"));
					String timeTaken = rs2.getString("TimeTaken"); 

					// Convert timeTaken string into an int representing seconds
					double secondsDouble = Double.parseDouble(timeTaken);
					int secondsInt = (int) Math.round(secondsDouble);
					
					// Convert seconds into a string in the format "mm:ss"
					int minutes = secondsInt / 60;
					int seconds = secondsInt % 60;
					String formattedTimeTaken = String.format("%02d:%02d", minutes, seconds);

					vector.add(formattedTimeTaken);
				}
				else
				{
					vector.add("-");
					vector.add("-");
				}
				
				tableData.add(vector);
				
				indicies.add((Integer) rs.getObject("LevelID")); 
			}
			
			tblModel.setDataVector(tableData, columnTitles);
			
			tblLevels.setModel(tblModel);
			
			for (int i = 0; i < tableData.size(); i++)
			{
				Vector<Object> row = new Vector<Object>(); 
				row.add(indicies.get(i)); 
				for (int j = 0; j < tableData.get(i).size(); j++)
					row.add(tableData.get(i).get(j)); 
				
				data.add(row); 
			}
		} catch (SQLException e) 
		{ 
			e.printStackTrace(); 
		} 
	}
	
	private void SelectLevel(int rowIndex)
	{
		DataManager.levelIndex = rowIndex; 
		DataManager.ResetLevelInfos(); 
		
		for (Vector<Object> vector : data) 
		{
			DataManager.EntryInfo newLevelInfo = new DataManager.EntryInfo((Integer)vector.get(0), (String)vector.get(1)); 
			DataManager.levelInfos.add(newLevelInfo); 
		}
		
		PlaytestScreen playtestScreen = new PlaytestScreen(this); 
        playtestScreen.setVisible(true);
        setVisible(false);   
	}
	
	private void OpenGamesScreen () 
	{
		DataManager.gameInfo.Reset(); 
		parent.setVisible(true);
		this.setVisible(false);
	}

	// Override the SetVisible method to update the table when the screen is opened
	@Override
	public void setVisible(boolean isVisible) 
	{
		super.setVisible(isVisible);
		if (isVisible)
			ShowLevels();
	}
}
